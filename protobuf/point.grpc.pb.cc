// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: point.proto

#include "point.pb.h"
#include "point.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace TSCached {

static const char* TSCachedService_method_names[] = {
  "/TSCached.TSCachedService/QueryPoints",
  "/TSCached.TSCachedService/WritePoints",
};

std::unique_ptr< TSCachedService::Stub> TSCachedService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TSCachedService::Stub> stub(new TSCachedService::Stub(channel));
  return stub;
}

TSCachedService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_QueryPoints_(TSCachedService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WritePoints_(TSCachedService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TSCachedService::Stub::QueryPoints(::grpc::ClientContext* context, const ::TSCached::QueryRequest& request, ::TSCached::QueryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_QueryPoints_, context, request, response);
}

void TSCachedService::Stub::experimental_async::QueryPoints(::grpc::ClientContext* context, const ::TSCached::QueryRequest* request, ::TSCached::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_QueryPoints_, context, request, response, std::move(f));
}

void TSCachedService::Stub::experimental_async::QueryPoints(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TSCached::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_QueryPoints_, context, request, response, std::move(f));
}

void TSCachedService::Stub::experimental_async::QueryPoints(::grpc::ClientContext* context, const ::TSCached::QueryRequest* request, ::TSCached::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_QueryPoints_, context, request, response, reactor);
}

void TSCachedService::Stub::experimental_async::QueryPoints(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TSCached::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_QueryPoints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TSCached::QueryResponse>* TSCachedService::Stub::AsyncQueryPointsRaw(::grpc::ClientContext* context, const ::TSCached::QueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::TSCached::QueryResponse>::Create(channel_.get(), cq, rpcmethod_QueryPoints_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::TSCached::QueryResponse>* TSCachedService::Stub::PrepareAsyncQueryPointsRaw(::grpc::ClientContext* context, const ::TSCached::QueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::TSCached::QueryResponse>::Create(channel_.get(), cq, rpcmethod_QueryPoints_, context, request, false);
}

::grpc::Status TSCachedService::Stub::WritePoints(::grpc::ClientContext* context, const ::TSCached::WriteRequest& request, ::TSCached::WriteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WritePoints_, context, request, response);
}

void TSCachedService::Stub::experimental_async::WritePoints(::grpc::ClientContext* context, const ::TSCached::WriteRequest* request, ::TSCached::WriteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WritePoints_, context, request, response, std::move(f));
}

void TSCachedService::Stub::experimental_async::WritePoints(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TSCached::WriteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WritePoints_, context, request, response, std::move(f));
}

void TSCachedService::Stub::experimental_async::WritePoints(::grpc::ClientContext* context, const ::TSCached::WriteRequest* request, ::TSCached::WriteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WritePoints_, context, request, response, reactor);
}

void TSCachedService::Stub::experimental_async::WritePoints(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TSCached::WriteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WritePoints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TSCached::WriteResponse>* TSCachedService::Stub::AsyncWritePointsRaw(::grpc::ClientContext* context, const ::TSCached::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::TSCached::WriteResponse>::Create(channel_.get(), cq, rpcmethod_WritePoints_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::TSCached::WriteResponse>* TSCachedService::Stub::PrepareAsyncWritePointsRaw(::grpc::ClientContext* context, const ::TSCached::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::TSCached::WriteResponse>::Create(channel_.get(), cq, rpcmethod_WritePoints_, context, request, false);
}

TSCachedService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TSCachedService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TSCachedService::Service, ::TSCached::QueryRequest, ::TSCached::QueryResponse>(
          std::mem_fn(&TSCachedService::Service::QueryPoints), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TSCachedService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TSCachedService::Service, ::TSCached::WriteRequest, ::TSCached::WriteResponse>(
          std::mem_fn(&TSCachedService::Service::WritePoints), this)));
}

TSCachedService::Service::~Service() {
}

::grpc::Status TSCachedService::Service::QueryPoints(::grpc::ServerContext* context, const ::TSCached::QueryRequest* request, ::TSCached::QueryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TSCachedService::Service::WritePoints(::grpc::ServerContext* context, const ::TSCached::WriteRequest* request, ::TSCached::WriteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace TSCached

