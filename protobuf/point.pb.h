// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: point.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_point_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_point_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_point_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_point_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_point_2eproto;
namespace TSCached {
class Field;
class FieldDefaultTypeInternal;
extern FieldDefaultTypeInternal _Field_default_instance_;
class Field_FieldsEntry_DoNotUse;
class Field_FieldsEntry_DoNotUseDefaultTypeInternal;
extern Field_FieldsEntry_DoNotUseDefaultTypeInternal _Field_FieldsEntry_DoNotUse_default_instance_;
class Points;
class PointsDefaultTypeInternal;
extern PointsDefaultTypeInternal _Points_default_instance_;
class QueryRequest;
class QueryRequestDefaultTypeInternal;
extern QueryRequestDefaultTypeInternal _QueryRequest_default_instance_;
class QueryRequest_TagsEntry_DoNotUse;
class QueryRequest_TagsEntry_DoNotUseDefaultTypeInternal;
extern QueryRequest_TagsEntry_DoNotUseDefaultTypeInternal _QueryRequest_TagsEntry_DoNotUse_default_instance_;
class QueryResponse;
class QueryResponseDefaultTypeInternal;
extern QueryResponseDefaultTypeInternal _QueryResponse_default_instance_;
class QueryResponse_TagsEntry_DoNotUse;
class QueryResponse_TagsEntry_DoNotUseDefaultTypeInternal;
extern QueryResponse_TagsEntry_DoNotUseDefaultTypeInternal _QueryResponse_TagsEntry_DoNotUse_default_instance_;
class WriteRequest;
class WriteRequestDefaultTypeInternal;
extern WriteRequestDefaultTypeInternal _WriteRequest_default_instance_;
class WriteRequest_TagsEntry_DoNotUse;
class WriteRequest_TagsEntry_DoNotUseDefaultTypeInternal;
extern WriteRequest_TagsEntry_DoNotUseDefaultTypeInternal _WriteRequest_TagsEntry_DoNotUse_default_instance_;
class WriteResponse;
class WriteResponseDefaultTypeInternal;
extern WriteResponseDefaultTypeInternal _WriteResponse_default_instance_;
}  // namespace TSCached
PROTOBUF_NAMESPACE_OPEN
template<> ::TSCached::Field* Arena::CreateMaybeMessage<::TSCached::Field>(Arena*);
template<> ::TSCached::Field_FieldsEntry_DoNotUse* Arena::CreateMaybeMessage<::TSCached::Field_FieldsEntry_DoNotUse>(Arena*);
template<> ::TSCached::Points* Arena::CreateMaybeMessage<::TSCached::Points>(Arena*);
template<> ::TSCached::QueryRequest* Arena::CreateMaybeMessage<::TSCached::QueryRequest>(Arena*);
template<> ::TSCached::QueryRequest_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::TSCached::QueryRequest_TagsEntry_DoNotUse>(Arena*);
template<> ::TSCached::QueryResponse* Arena::CreateMaybeMessage<::TSCached::QueryResponse>(Arena*);
template<> ::TSCached::QueryResponse_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::TSCached::QueryResponse_TagsEntry_DoNotUse>(Arena*);
template<> ::TSCached::WriteRequest* Arena::CreateMaybeMessage<::TSCached::WriteRequest>(Arena*);
template<> ::TSCached::WriteRequest_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::TSCached::WriteRequest_TagsEntry_DoNotUse>(Arena*);
template<> ::TSCached::WriteResponse* Arena::CreateMaybeMessage<::TSCached::WriteResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TSCached {

// ===================================================================

class Field_FieldsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Field_FieldsEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Field_FieldsEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  Field_FieldsEntry_DoNotUse();
  Field_FieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Field_FieldsEntry_DoNotUse& other);
  static const Field_FieldsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Field_FieldsEntry_DoNotUse*>(&_Field_FieldsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "TSCached.Field.FieldsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_point_2eproto);
    return ::descriptor_table_point_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Field :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCached.Field) */ {
 public:
  Field();
  virtual ~Field();

  Field(const Field& from);
  Field(Field&& from) noexcept
    : Field() {
    *this = ::std::move(from);
  }

  inline Field& operator=(const Field& from) {
    CopyFrom(from);
    return *this;
  }
  inline Field& operator=(Field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Field& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Field* internal_default_instance() {
    return reinterpret_cast<const Field*>(
               &_Field_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Field& a, Field& b) {
    a.Swap(&b);
  }
  inline void Swap(Field* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Field* New() const final {
    return CreateMaybeMessage<Field>(nullptr);
  }

  Field* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Field>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Field& from);
  void MergeFrom(const Field& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Field* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCached.Field";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_point_2eproto);
    return ::descriptor_table_point_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // map<string, double> fields = 1;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      _internal_fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      _internal_mutable_fields();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      mutable_fields();

  // int64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCached.Field)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Field_FieldsEntry_DoNotUse,
      std::string, double,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
      0 > fields_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_point_2eproto;
};
// -------------------------------------------------------------------

class Points :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCached.Points) */ {
 public:
  Points();
  virtual ~Points();

  Points(const Points& from);
  Points(Points&& from) noexcept
    : Points() {
    *this = ::std::move(from);
  }

  inline Points& operator=(const Points& from) {
    CopyFrom(from);
    return *this;
  }
  inline Points& operator=(Points&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Points& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Points* internal_default_instance() {
    return reinterpret_cast<const Points*>(
               &_Points_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Points& a, Points& b) {
    a.Swap(&b);
  }
  inline void Swap(Points* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Points* New() const final {
    return CreateMaybeMessage<Points>(nullptr);
  }

  Points* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Points>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Points& from);
  void MergeFrom(const Points& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Points* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCached.Points";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_point_2eproto);
    return ::descriptor_table_point_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 4,
  };
  // repeated .TSCached.Field fields = 4;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::TSCached::Field* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCached::Field >*
      mutable_fields();
  private:
  const ::TSCached::Field& _internal_fields(int index) const;
  ::TSCached::Field* _internal_add_fields();
  public:
  const ::TSCached::Field& fields(int index) const;
  ::TSCached::Field* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCached::Field >&
      fields() const;

  // @@protoc_insertion_point(class_scope:TSCached.Points)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCached::Field > fields_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_point_2eproto;
};
// -------------------------------------------------------------------

class QueryRequest_TagsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryRequest_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryRequest_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  QueryRequest_TagsEntry_DoNotUse();
  QueryRequest_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QueryRequest_TagsEntry_DoNotUse& other);
  static const QueryRequest_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QueryRequest_TagsEntry_DoNotUse*>(&_QueryRequest_TagsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "TSCached.QueryRequest.TagsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "TSCached.QueryRequest.TagsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_point_2eproto);
    return ::descriptor_table_point_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class QueryRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCached.QueryRequest) */ {
 public:
  QueryRequest();
  virtual ~QueryRequest();

  QueryRequest(const QueryRequest& from);
  QueryRequest(QueryRequest&& from) noexcept
    : QueryRequest() {
    *this = ::std::move(from);
  }

  inline QueryRequest& operator=(const QueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRequest& operator=(QueryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRequest*>(
               &_QueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryRequest& a, QueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryRequest* New() const final {
    return CreateMaybeMessage<QueryRequest>(nullptr);
  }

  QueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryRequest& from);
  void MergeFrom(const QueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCached.QueryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_point_2eproto);
    return ::descriptor_table_point_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 3,
    kDataBaseFieldNumber = 1,
    kTableNameFieldNumber = 2,
    kStartTimeFieldNumber = 4,
    kEndTimeFieldNumber = 5,
  };
  // map<string, string> tags = 3;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_tags();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_tags();

  // string dataBase = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // string tableName = 2;
  void clear_tablename();
  const std::string& tablename() const;
  void set_tablename(const std::string& value);
  void set_tablename(std::string&& value);
  void set_tablename(const char* value);
  void set_tablename(const char* value, size_t size);
  std::string* mutable_tablename();
  std::string* release_tablename();
  void set_allocated_tablename(std::string* tablename);
  private:
  const std::string& _internal_tablename() const;
  void _internal_set_tablename(const std::string& value);
  std::string* _internal_mutable_tablename();
  public:

  // int64 startTime = 4;
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::int64 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 endTime = 5;
  void clear_endtime();
  ::PROTOBUF_NAMESPACE_ID::int64 endtime() const;
  void set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_endtime() const;
  void _internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCached.QueryRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      QueryRequest_TagsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tablename_;
  ::PROTOBUF_NAMESPACE_ID::int64 starttime_;
  ::PROTOBUF_NAMESPACE_ID::int64 endtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_point_2eproto;
};
// -------------------------------------------------------------------

class WriteRequest_TagsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WriteRequest_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WriteRequest_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  WriteRequest_TagsEntry_DoNotUse();
  WriteRequest_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const WriteRequest_TagsEntry_DoNotUse& other);
  static const WriteRequest_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const WriteRequest_TagsEntry_DoNotUse*>(&_WriteRequest_TagsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "TSCached.WriteRequest.TagsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "TSCached.WriteRequest.TagsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_point_2eproto);
    return ::descriptor_table_point_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class WriteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCached.WriteRequest) */ {
 public:
  WriteRequest();
  virtual ~WriteRequest();

  WriteRequest(const WriteRequest& from);
  WriteRequest(WriteRequest&& from) noexcept
    : WriteRequest() {
    *this = ::std::move(from);
  }

  inline WriteRequest& operator=(const WriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteRequest& operator=(WriteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteRequest* internal_default_instance() {
    return reinterpret_cast<const WriteRequest*>(
               &_WriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WriteRequest& a, WriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteRequest* New() const final {
    return CreateMaybeMessage<WriteRequest>(nullptr);
  }

  WriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteRequest& from);
  void MergeFrom(const WriteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCached.WriteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_point_2eproto);
    return ::descriptor_table_point_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 3,
    kDataBaseFieldNumber = 1,
    kTableNameFieldNumber = 2,
    kPointsFieldNumber = 4,
  };
  // map<string, string> tags = 3;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_tags();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_tags();

  // string dataBase = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // string tableName = 2;
  void clear_tablename();
  const std::string& tablename() const;
  void set_tablename(const std::string& value);
  void set_tablename(std::string&& value);
  void set_tablename(const char* value);
  void set_tablename(const char* value, size_t size);
  std::string* mutable_tablename();
  std::string* release_tablename();
  void set_allocated_tablename(std::string* tablename);
  private:
  const std::string& _internal_tablename() const;
  void _internal_set_tablename(const std::string& value);
  std::string* _internal_mutable_tablename();
  public:

  // .TSCached.Points points = 4;
  bool has_points() const;
  private:
  bool _internal_has_points() const;
  public:
  void clear_points();
  const ::TSCached::Points& points() const;
  ::TSCached::Points* release_points();
  ::TSCached::Points* mutable_points();
  void set_allocated_points(::TSCached::Points* points);
  private:
  const ::TSCached::Points& _internal_points() const;
  ::TSCached::Points* _internal_mutable_points();
  public:

  // @@protoc_insertion_point(class_scope:TSCached.WriteRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      WriteRequest_TagsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tablename_;
  ::TSCached::Points* points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_point_2eproto;
};
// -------------------------------------------------------------------

class QueryResponse_TagsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryResponse_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryResponse_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  QueryResponse_TagsEntry_DoNotUse();
  QueryResponse_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QueryResponse_TagsEntry_DoNotUse& other);
  static const QueryResponse_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QueryResponse_TagsEntry_DoNotUse*>(&_QueryResponse_TagsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "TSCached.QueryResponse.TagsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "TSCached.QueryResponse.TagsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_point_2eproto);
    return ::descriptor_table_point_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class QueryResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCached.QueryResponse) */ {
 public:
  QueryResponse();
  virtual ~QueryResponse();

  QueryResponse(const QueryResponse& from);
  QueryResponse(QueryResponse&& from) noexcept
    : QueryResponse() {
    *this = ::std::move(from);
  }

  inline QueryResponse& operator=(const QueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResponse& operator=(QueryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponse* internal_default_instance() {
    return reinterpret_cast<const QueryResponse*>(
               &_QueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QueryResponse& a, QueryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResponse* New() const final {
    return CreateMaybeMessage<QueryResponse>(nullptr);
  }

  QueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryResponse& from);
  void MergeFrom(const QueryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCached.QueryResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_point_2eproto);
    return ::descriptor_table_point_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 5,
    kMessageFieldNumber = 1,
    kDataBaseFieldNumber = 3,
    kTableNameFieldNumber = 4,
    kPointsFieldNumber = 6,
    kStatusCodeFieldNumber = 2,
  };
  // map<string, string> tags = 5;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_tags();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_tags();

  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string dataBase = 3;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // string tableName = 4;
  void clear_tablename();
  const std::string& tablename() const;
  void set_tablename(const std::string& value);
  void set_tablename(std::string&& value);
  void set_tablename(const char* value);
  void set_tablename(const char* value, size_t size);
  std::string* mutable_tablename();
  std::string* release_tablename();
  void set_allocated_tablename(std::string* tablename);
  private:
  const std::string& _internal_tablename() const;
  void _internal_set_tablename(const std::string& value);
  std::string* _internal_mutable_tablename();
  public:

  // .TSCached.Points points = 6;
  bool has_points() const;
  private:
  bool _internal_has_points() const;
  public:
  void clear_points();
  const ::TSCached::Points& points() const;
  ::TSCached::Points* release_points();
  ::TSCached::Points* mutable_points();
  void set_allocated_points(::TSCached::Points* points);
  private:
  const ::TSCached::Points& _internal_points() const;
  ::TSCached::Points* _internal_mutable_points();
  public:

  // int32 statusCode = 2;
  void clear_statuscode();
  ::PROTOBUF_NAMESPACE_ID::int32 statuscode() const;
  void set_statuscode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_statuscode() const;
  void _internal_set_statuscode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCached.QueryResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      QueryResponse_TagsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tablename_;
  ::TSCached::Points* points_;
  ::PROTOBUF_NAMESPACE_ID::int32 statuscode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_point_2eproto;
};
// -------------------------------------------------------------------

class WriteResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCached.WriteResponse) */ {
 public:
  WriteResponse();
  virtual ~WriteResponse();

  WriteResponse(const WriteResponse& from);
  WriteResponse(WriteResponse&& from) noexcept
    : WriteResponse() {
    *this = ::std::move(from);
  }

  inline WriteResponse& operator=(const WriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteResponse& operator=(WriteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteResponse* internal_default_instance() {
    return reinterpret_cast<const WriteResponse*>(
               &_WriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(WriteResponse& a, WriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteResponse* New() const final {
    return CreateMaybeMessage<WriteResponse>(nullptr);
  }

  WriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteResponse& from);
  void MergeFrom(const WriteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCached.WriteResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_point_2eproto);
    return ::descriptor_table_point_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 statusCode = 2;
  void clear_statuscode();
  ::PROTOBUF_NAMESPACE_ID::int32 statuscode() const;
  void set_statuscode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_statuscode() const;
  void _internal_set_statuscode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCached.WriteResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 statuscode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_point_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Field

// int64 timestamp = 2;
inline void Field::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Field::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Field::timestamp() const {
  // @@protoc_insertion_point(field_get:TSCached.Field.timestamp)
  return _internal_timestamp();
}
inline void Field::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void Field::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:TSCached.Field.timestamp)
}

// map<string, double> fields = 1;
inline int Field::_internal_fields_size() const {
  return fields_.size();
}
inline int Field::fields_size() const {
  return _internal_fields_size();
}
inline void Field::clear_fields() {
  fields_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
Field::_internal_fields() const {
  return fields_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
Field::fields() const {
  // @@protoc_insertion_point(field_map:TSCached.Field.fields)
  return _internal_fields();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
Field::_internal_mutable_fields() {
  return fields_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
Field::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_map:TSCached.Field.fields)
  return _internal_mutable_fields();
}

// -------------------------------------------------------------------

// Points

// repeated .TSCached.Field fields = 4;
inline int Points::_internal_fields_size() const {
  return fields_.size();
}
inline int Points::fields_size() const {
  return _internal_fields_size();
}
inline void Points::clear_fields() {
  fields_.Clear();
}
inline ::TSCached::Field* Points::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:TSCached.Points.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCached::Field >*
Points::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:TSCached.Points.fields)
  return &fields_;
}
inline const ::TSCached::Field& Points::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::TSCached::Field& Points::fields(int index) const {
  // @@protoc_insertion_point(field_get:TSCached.Points.fields)
  return _internal_fields(index);
}
inline ::TSCached::Field* Points::_internal_add_fields() {
  return fields_.Add();
}
inline ::TSCached::Field* Points::add_fields() {
  // @@protoc_insertion_point(field_add:TSCached.Points.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCached::Field >&
Points::fields() const {
  // @@protoc_insertion_point(field_list:TSCached.Points.fields)
  return fields_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// QueryRequest

// string dataBase = 1;
inline void QueryRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryRequest::database() const {
  // @@protoc_insertion_point(field_get:TSCached.QueryRequest.dataBase)
  return _internal_database();
}
inline void QueryRequest::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:TSCached.QueryRequest.dataBase)
}
inline std::string* QueryRequest::mutable_database() {
  // @@protoc_insertion_point(field_mutable:TSCached.QueryRequest.dataBase)
  return _internal_mutable_database();
}
inline const std::string& QueryRequest::_internal_database() const {
  return database_.GetNoArena();
}
inline void QueryRequest::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryRequest::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TSCached.QueryRequest.dataBase)
}
inline void QueryRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TSCached.QueryRequest.dataBase)
}
inline void QueryRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TSCached.QueryRequest.dataBase)
}
inline std::string* QueryRequest::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryRequest::release_database() {
  // @@protoc_insertion_point(field_release:TSCached.QueryRequest.dataBase)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRequest::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:TSCached.QueryRequest.dataBase)
}

// string tableName = 2;
inline void QueryRequest::clear_tablename() {
  tablename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryRequest::tablename() const {
  // @@protoc_insertion_point(field_get:TSCached.QueryRequest.tableName)
  return _internal_tablename();
}
inline void QueryRequest::set_tablename(const std::string& value) {
  _internal_set_tablename(value);
  // @@protoc_insertion_point(field_set:TSCached.QueryRequest.tableName)
}
inline std::string* QueryRequest::mutable_tablename() {
  // @@protoc_insertion_point(field_mutable:TSCached.QueryRequest.tableName)
  return _internal_mutable_tablename();
}
inline const std::string& QueryRequest::_internal_tablename() const {
  return tablename_.GetNoArena();
}
inline void QueryRequest::_internal_set_tablename(const std::string& value) {
  
  tablename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryRequest::set_tablename(std::string&& value) {
  
  tablename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TSCached.QueryRequest.tableName)
}
inline void QueryRequest::set_tablename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tablename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TSCached.QueryRequest.tableName)
}
inline void QueryRequest::set_tablename(const char* value, size_t size) {
  
  tablename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TSCached.QueryRequest.tableName)
}
inline std::string* QueryRequest::_internal_mutable_tablename() {
  
  return tablename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryRequest::release_tablename() {
  // @@protoc_insertion_point(field_release:TSCached.QueryRequest.tableName)
  
  return tablename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRequest::set_allocated_tablename(std::string* tablename) {
  if (tablename != nullptr) {
    
  } else {
    
  }
  tablename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tablename);
  // @@protoc_insertion_point(field_set_allocated:TSCached.QueryRequest.tableName)
}

// map<string, string> tags = 3;
inline int QueryRequest::_internal_tags_size() const {
  return tags_.size();
}
inline int QueryRequest::tags_size() const {
  return _internal_tags_size();
}
inline void QueryRequest::clear_tags() {
  tags_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
QueryRequest::_internal_tags() const {
  return tags_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
QueryRequest::tags() const {
  // @@protoc_insertion_point(field_map:TSCached.QueryRequest.tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
QueryRequest::_internal_mutable_tags() {
  return tags_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
QueryRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:TSCached.QueryRequest.tags)
  return _internal_mutable_tags();
}

// int64 startTime = 4;
inline void QueryRequest::clear_starttime() {
  starttime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryRequest::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryRequest::starttime() const {
  // @@protoc_insertion_point(field_get:TSCached.QueryRequest.startTime)
  return _internal_starttime();
}
inline void QueryRequest::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  starttime_ = value;
}
inline void QueryRequest::set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:TSCached.QueryRequest.startTime)
}

// int64 endTime = 5;
inline void QueryRequest::clear_endtime() {
  endtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryRequest::_internal_endtime() const {
  return endtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryRequest::endtime() const {
  // @@protoc_insertion_point(field_get:TSCached.QueryRequest.endTime)
  return _internal_endtime();
}
inline void QueryRequest::_internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  endtime_ = value;
}
inline void QueryRequest::set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:TSCached.QueryRequest.endTime)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// WriteRequest

// string dataBase = 1;
inline void WriteRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WriteRequest::database() const {
  // @@protoc_insertion_point(field_get:TSCached.WriteRequest.dataBase)
  return _internal_database();
}
inline void WriteRequest::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:TSCached.WriteRequest.dataBase)
}
inline std::string* WriteRequest::mutable_database() {
  // @@protoc_insertion_point(field_mutable:TSCached.WriteRequest.dataBase)
  return _internal_mutable_database();
}
inline const std::string& WriteRequest::_internal_database() const {
  return database_.GetNoArena();
}
inline void WriteRequest::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WriteRequest::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TSCached.WriteRequest.dataBase)
}
inline void WriteRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TSCached.WriteRequest.dataBase)
}
inline void WriteRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TSCached.WriteRequest.dataBase)
}
inline std::string* WriteRequest::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WriteRequest::release_database() {
  // @@protoc_insertion_point(field_release:TSCached.WriteRequest.dataBase)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WriteRequest::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:TSCached.WriteRequest.dataBase)
}

// string tableName = 2;
inline void WriteRequest::clear_tablename() {
  tablename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WriteRequest::tablename() const {
  // @@protoc_insertion_point(field_get:TSCached.WriteRequest.tableName)
  return _internal_tablename();
}
inline void WriteRequest::set_tablename(const std::string& value) {
  _internal_set_tablename(value);
  // @@protoc_insertion_point(field_set:TSCached.WriteRequest.tableName)
}
inline std::string* WriteRequest::mutable_tablename() {
  // @@protoc_insertion_point(field_mutable:TSCached.WriteRequest.tableName)
  return _internal_mutable_tablename();
}
inline const std::string& WriteRequest::_internal_tablename() const {
  return tablename_.GetNoArena();
}
inline void WriteRequest::_internal_set_tablename(const std::string& value) {
  
  tablename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WriteRequest::set_tablename(std::string&& value) {
  
  tablename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TSCached.WriteRequest.tableName)
}
inline void WriteRequest::set_tablename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tablename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TSCached.WriteRequest.tableName)
}
inline void WriteRequest::set_tablename(const char* value, size_t size) {
  
  tablename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TSCached.WriteRequest.tableName)
}
inline std::string* WriteRequest::_internal_mutable_tablename() {
  
  return tablename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WriteRequest::release_tablename() {
  // @@protoc_insertion_point(field_release:TSCached.WriteRequest.tableName)
  
  return tablename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WriteRequest::set_allocated_tablename(std::string* tablename) {
  if (tablename != nullptr) {
    
  } else {
    
  }
  tablename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tablename);
  // @@protoc_insertion_point(field_set_allocated:TSCached.WriteRequest.tableName)
}

// map<string, string> tags = 3;
inline int WriteRequest::_internal_tags_size() const {
  return tags_.size();
}
inline int WriteRequest::tags_size() const {
  return _internal_tags_size();
}
inline void WriteRequest::clear_tags() {
  tags_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
WriteRequest::_internal_tags() const {
  return tags_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
WriteRequest::tags() const {
  // @@protoc_insertion_point(field_map:TSCached.WriteRequest.tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
WriteRequest::_internal_mutable_tags() {
  return tags_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
WriteRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:TSCached.WriteRequest.tags)
  return _internal_mutable_tags();
}

// .TSCached.Points points = 4;
inline bool WriteRequest::_internal_has_points() const {
  return this != internal_default_instance() && points_ != nullptr;
}
inline bool WriteRequest::has_points() const {
  return _internal_has_points();
}
inline void WriteRequest::clear_points() {
  if (GetArenaNoVirtual() == nullptr && points_ != nullptr) {
    delete points_;
  }
  points_ = nullptr;
}
inline const ::TSCached::Points& WriteRequest::_internal_points() const {
  const ::TSCached::Points* p = points_;
  return p != nullptr ? *p : *reinterpret_cast<const ::TSCached::Points*>(
      &::TSCached::_Points_default_instance_);
}
inline const ::TSCached::Points& WriteRequest::points() const {
  // @@protoc_insertion_point(field_get:TSCached.WriteRequest.points)
  return _internal_points();
}
inline ::TSCached::Points* WriteRequest::release_points() {
  // @@protoc_insertion_point(field_release:TSCached.WriteRequest.points)
  
  ::TSCached::Points* temp = points_;
  points_ = nullptr;
  return temp;
}
inline ::TSCached::Points* WriteRequest::_internal_mutable_points() {
  
  if (points_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCached::Points>(GetArenaNoVirtual());
    points_ = p;
  }
  return points_;
}
inline ::TSCached::Points* WriteRequest::mutable_points() {
  // @@protoc_insertion_point(field_mutable:TSCached.WriteRequest.points)
  return _internal_mutable_points();
}
inline void WriteRequest::set_allocated_points(::TSCached::Points* points) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete points_;
  }
  if (points) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      points = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, points, submessage_arena);
    }
    
  } else {
    
  }
  points_ = points;
  // @@protoc_insertion_point(field_set_allocated:TSCached.WriteRequest.points)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// QueryResponse

// string message = 1;
inline void QueryResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryResponse::message() const {
  // @@protoc_insertion_point(field_get:TSCached.QueryResponse.message)
  return _internal_message();
}
inline void QueryResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:TSCached.QueryResponse.message)
}
inline std::string* QueryResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:TSCached.QueryResponse.message)
  return _internal_mutable_message();
}
inline const std::string& QueryResponse::_internal_message() const {
  return message_.GetNoArena();
}
inline void QueryResponse::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryResponse::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TSCached.QueryResponse.message)
}
inline void QueryResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TSCached.QueryResponse.message)
}
inline void QueryResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TSCached.QueryResponse.message)
}
inline std::string* QueryResponse::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryResponse::release_message() {
  // @@protoc_insertion_point(field_release:TSCached.QueryResponse.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:TSCached.QueryResponse.message)
}

// int32 statusCode = 2;
inline void QueryResponse::clear_statuscode() {
  statuscode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryResponse::_internal_statuscode() const {
  return statuscode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryResponse::statuscode() const {
  // @@protoc_insertion_point(field_get:TSCached.QueryResponse.statusCode)
  return _internal_statuscode();
}
inline void QueryResponse::_internal_set_statuscode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  statuscode_ = value;
}
inline void QueryResponse::set_statuscode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_statuscode(value);
  // @@protoc_insertion_point(field_set:TSCached.QueryResponse.statusCode)
}

// string dataBase = 3;
inline void QueryResponse::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryResponse::database() const {
  // @@protoc_insertion_point(field_get:TSCached.QueryResponse.dataBase)
  return _internal_database();
}
inline void QueryResponse::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:TSCached.QueryResponse.dataBase)
}
inline std::string* QueryResponse::mutable_database() {
  // @@protoc_insertion_point(field_mutable:TSCached.QueryResponse.dataBase)
  return _internal_mutable_database();
}
inline const std::string& QueryResponse::_internal_database() const {
  return database_.GetNoArena();
}
inline void QueryResponse::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryResponse::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TSCached.QueryResponse.dataBase)
}
inline void QueryResponse::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TSCached.QueryResponse.dataBase)
}
inline void QueryResponse::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TSCached.QueryResponse.dataBase)
}
inline std::string* QueryResponse::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryResponse::release_database() {
  // @@protoc_insertion_point(field_release:TSCached.QueryResponse.dataBase)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryResponse::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:TSCached.QueryResponse.dataBase)
}

// string tableName = 4;
inline void QueryResponse::clear_tablename() {
  tablename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryResponse::tablename() const {
  // @@protoc_insertion_point(field_get:TSCached.QueryResponse.tableName)
  return _internal_tablename();
}
inline void QueryResponse::set_tablename(const std::string& value) {
  _internal_set_tablename(value);
  // @@protoc_insertion_point(field_set:TSCached.QueryResponse.tableName)
}
inline std::string* QueryResponse::mutable_tablename() {
  // @@protoc_insertion_point(field_mutable:TSCached.QueryResponse.tableName)
  return _internal_mutable_tablename();
}
inline const std::string& QueryResponse::_internal_tablename() const {
  return tablename_.GetNoArena();
}
inline void QueryResponse::_internal_set_tablename(const std::string& value) {
  
  tablename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryResponse::set_tablename(std::string&& value) {
  
  tablename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TSCached.QueryResponse.tableName)
}
inline void QueryResponse::set_tablename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tablename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TSCached.QueryResponse.tableName)
}
inline void QueryResponse::set_tablename(const char* value, size_t size) {
  
  tablename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TSCached.QueryResponse.tableName)
}
inline std::string* QueryResponse::_internal_mutable_tablename() {
  
  return tablename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryResponse::release_tablename() {
  // @@protoc_insertion_point(field_release:TSCached.QueryResponse.tableName)
  
  return tablename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryResponse::set_allocated_tablename(std::string* tablename) {
  if (tablename != nullptr) {
    
  } else {
    
  }
  tablename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tablename);
  // @@protoc_insertion_point(field_set_allocated:TSCached.QueryResponse.tableName)
}

// map<string, string> tags = 5;
inline int QueryResponse::_internal_tags_size() const {
  return tags_.size();
}
inline int QueryResponse::tags_size() const {
  return _internal_tags_size();
}
inline void QueryResponse::clear_tags() {
  tags_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
QueryResponse::_internal_tags() const {
  return tags_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
QueryResponse::tags() const {
  // @@protoc_insertion_point(field_map:TSCached.QueryResponse.tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
QueryResponse::_internal_mutable_tags() {
  return tags_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
QueryResponse::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:TSCached.QueryResponse.tags)
  return _internal_mutable_tags();
}

// .TSCached.Points points = 6;
inline bool QueryResponse::_internal_has_points() const {
  return this != internal_default_instance() && points_ != nullptr;
}
inline bool QueryResponse::has_points() const {
  return _internal_has_points();
}
inline void QueryResponse::clear_points() {
  if (GetArenaNoVirtual() == nullptr && points_ != nullptr) {
    delete points_;
  }
  points_ = nullptr;
}
inline const ::TSCached::Points& QueryResponse::_internal_points() const {
  const ::TSCached::Points* p = points_;
  return p != nullptr ? *p : *reinterpret_cast<const ::TSCached::Points*>(
      &::TSCached::_Points_default_instance_);
}
inline const ::TSCached::Points& QueryResponse::points() const {
  // @@protoc_insertion_point(field_get:TSCached.QueryResponse.points)
  return _internal_points();
}
inline ::TSCached::Points* QueryResponse::release_points() {
  // @@protoc_insertion_point(field_release:TSCached.QueryResponse.points)
  
  ::TSCached::Points* temp = points_;
  points_ = nullptr;
  return temp;
}
inline ::TSCached::Points* QueryResponse::_internal_mutable_points() {
  
  if (points_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCached::Points>(GetArenaNoVirtual());
    points_ = p;
  }
  return points_;
}
inline ::TSCached::Points* QueryResponse::mutable_points() {
  // @@protoc_insertion_point(field_mutable:TSCached.QueryResponse.points)
  return _internal_mutable_points();
}
inline void QueryResponse::set_allocated_points(::TSCached::Points* points) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete points_;
  }
  if (points) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      points = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, points, submessage_arena);
    }
    
  } else {
    
  }
  points_ = points;
  // @@protoc_insertion_point(field_set_allocated:TSCached.QueryResponse.points)
}

// -------------------------------------------------------------------

// WriteResponse

// string message = 1;
inline void WriteResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WriteResponse::message() const {
  // @@protoc_insertion_point(field_get:TSCached.WriteResponse.message)
  return _internal_message();
}
inline void WriteResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:TSCached.WriteResponse.message)
}
inline std::string* WriteResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:TSCached.WriteResponse.message)
  return _internal_mutable_message();
}
inline const std::string& WriteResponse::_internal_message() const {
  return message_.GetNoArena();
}
inline void WriteResponse::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WriteResponse::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TSCached.WriteResponse.message)
}
inline void WriteResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TSCached.WriteResponse.message)
}
inline void WriteResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TSCached.WriteResponse.message)
}
inline std::string* WriteResponse::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WriteResponse::release_message() {
  // @@protoc_insertion_point(field_release:TSCached.WriteResponse.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WriteResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:TSCached.WriteResponse.message)
}

// int32 statusCode = 2;
inline void WriteResponse::clear_statuscode() {
  statuscode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriteResponse::_internal_statuscode() const {
  return statuscode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriteResponse::statuscode() const {
  // @@protoc_insertion_point(field_get:TSCached.WriteResponse.statusCode)
  return _internal_statuscode();
}
inline void WriteResponse::_internal_set_statuscode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  statuscode_ = value;
}
inline void WriteResponse::set_statuscode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_statuscode(value);
  // @@protoc_insertion_point(field_set:TSCached.WriteResponse.statusCode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSCached

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_point_2eproto
